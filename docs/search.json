[
  {
    "objectID": "Exercise-18.html",
    "href": "Exercise-18.html",
    "title": "Exercise-18",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.7     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.2\n✔ recipes      1.2.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n\n\n\ncovid_url &lt;- 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv'\npopulation_url &lt;- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'\n\ndata &lt;- readr::read_csv(covid_url)\n\nRows: 61942 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): state, fips\ndbl  (2): cases, deaths\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncensus &lt;- readr::read_csv(\"C:/Users/aldai/Downloads/co-est2023-alldata.csv\")\n\nRows: 3195 Columns: 67\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SUMLEV, STATE, COUNTY, STNAME, CTYNAME\ndbl (62): REGION, DIVISION, ESTIMATESBASE2020, POPESTIMATE2020, POPESTIMATE2...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ncensus_1 &lt;- census |&gt;\n  filter(COUNTY == \"000\") |&gt;\n  mutate(fips = STATE) |&gt;\n  select(fips, POPESTIMATE2020, DEATHS2020, BIRTHS2020)\n\n\nstate_data &lt;- data |&gt;\n  group_by(fips) |&gt;\n  mutate(new_cases = pmax(0, cases - lag(cases)),\n         new_deaths = pmax(deaths - lag(deaths))) |&gt;\n  ungroup()\n\n\nstate_data &lt;- state_data |&gt;\n  left_join(census_1, by = \"fips\")\n\n\nstate_data &lt;- state_data |&gt;\n  mutate(y = year(date), m = month(date), season = case_when(m %in% c(12, 1, 2) ~ \"Winter\", m %in% c(3, 4, 5) ~ \"Spring\", m %in% c(6, 7, 8) ~ \"Summer\", m %in% c(9, 10, 11) ~ \"Fall\")) |&gt;\n  group_by(state, y, season) |&gt;\n  mutate(season_cases = sum(new_cases, na.rm = TRUE),\n         season_deaths = sum(new_deaths, na.rm = TRUE)) |&gt;\n  distinct(state, y, season, .keep_all = TRUE) |&gt;\n  ungroup() |&gt;\n  select(state, contains(\"season\"), contains(\"2020\")) |&gt;\n  drop_na() |&gt;\n  mutate(logC = log(season_cases + 1))\n\nskimr::skim(state_data)\n\n\nData summary\n\n\nName\nstate_data\n\n\nNumber of rows\n714\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nstate\n0\n1\n4\n20\n0\n51\n0\n\n\nseason\n0\n1\n4\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nseason_cases\n0\n1\n143996.81\n261098.77\n468.00\n20206.00\n66311.5\n163963.25\n3783863.00\n▇▁▁▁▁\n\n\nseason_deaths\n0\n1\n1581.05\n2664.82\n-2830.00\n227.75\n719.0\n1795.00\n29699.00\n▇▁▁▁▁\n\n\nPOPESTIMATE2020\n0\n1\n6500528.10\n7340809.54\n577664.00\n1791562.00\n4508155.0\n7724566.00\n39503200.00\n▇▂▁▁▁\n\n\nDEATHS2020\n0\n1\n16706.35\n17286.69\n1171.00\n3704.00\n11938.0\n19723.00\n74587.00\n▇▂▁▁▁\n\n\nBIRTHS2020\n0\n1\n17531.82\n19729.85\n1303.00\n4296.00\n12579.0\n21105.00\n103133.00\n▇▂▁▁▁\n\n\nlogC\n0\n1\n10.93\n1.50\n6.15\n9.91\n11.1\n12.01\n15.15\n▁▃▇▆▁\n\n\n\n\n\n\nML Applications\n\nset.seed(123)\nsplit &lt;- initial_split(state_data, prop = .75, strata = season)\ntrain &lt;- training(split)\ntest &lt;- testing(split)\nfolds &lt;- vfold_cv(train, v = 10)\n\n\nreceta &lt;- recipe(logC ~ ., data = train) |&gt;\n  step_rm(state) |&gt;\n  step_dummy(all_nominal_predictors()) |&gt;\n  step_scale(all_numeric_predictors()) |&gt;\n  step_center(all_numeric_predictors())\n\n\nlm &lt;- linear_reg() |&gt;\n  set_engine(\"lm\") |&gt;\n  set_mode(\"regression\")\n\n\nrf &lt;- rand_forest() |&gt;\n  set_engine(\"ranger\") |&gt;\n  set_mode(\"regression\")\n\n\nrf_2 &lt;- rand_forest() |&gt;\n  set_engine(\"randomForest\") |&gt;\n  set_mode(\"regression\")\n\n\nb &lt;- boost_tree() |&gt;\n  set_engine(\"xgboost\") |&gt;\n  set_mode(\"regression\")\n\n\nnn &lt;- mlp() |&gt;\n  set_engine(\"nnet\") |&gt;\n  set_mode(\"regression\")\n\n\nwf &lt;- workflow_set(list(receta), list(rf, rf_2, b, nn)) |&gt;\n  workflow_map(resamples = folds)\n\nautoplot(wf)\n\n\n\n\n\n\n\n\n\nB_fit &lt;- workflow() |&gt;\n  add_recipe(receta) |&gt;\n  add_model(b) |&gt;\n  fit(data = train)\n\n\nb_pred &lt;- augment(B_fit, new_data = test)\n\nb_pred &lt;- b_pred |&gt;\n  mutate(predicted_deaths = exp(.pred) - 1)\n\n\nggplot(b_pred, aes(x = DEATHS2020, y = predicted_deaths)) +\n  geom_point(alpha = 0.6, color = \"darkgreen\") + \n  geom_smooth(method = \"lm\", color = \"red\") +\n  labs(title = \"Actual vs Predicted Deaths from Boosting Model\",\n       x = \"Actual Deaths (2020)\",\n       y = \"Predicted Deaths\",\n       caption = \"Model: Boosting (XGBoost)\") +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'"
  }
]